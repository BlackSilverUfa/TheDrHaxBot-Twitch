if (msg.init) {
    context.set('answers', msg.payload, 'memory');
    node.status('Ready');
    return;
}

const { range, find } = _; // = require('lodash');
const { choose, random, rchoose, wchoose, smartJoin } = flow.get('func', 'memory');
const { actions, targets } = context.get('answers', 'memory');

const user = msg.payload.userstate.username;
const mentions = Object.entries(msg.parsed.mentions_list.reduce((obj, curr) => {
    obj[curr] = (obj[curr] || 0) + 1;
    return obj;
}, {}));

function bite(user) {
    switch (user) {
        case 'my4hoe': return '–º—É—á–Ω–æ–µ NomNom';

        case '<@692736268567707719>':
        case 'kovalenko_p':
        case 'tomatepotato':
            if (random() > 0.25) break;

            return choose([
                '–ø–æ—Ç–∞—Ç Tastge ü•î',
                '–±–∞—Ç–∞—Ç Tastge üç†',
                '—Ç–æ–º–∞—Ç Tastge üçÖ',
                '–ø—é—Ä–µ—à–∫—É Tastge',
                '–ø–æ–ø–∞—Ç slapSlap',
                '–±–æ—Ç–∞—Ç MrDestructoid',
                '–ª—è–∂–∫—É catNom',
                '–∫–æ—Ç–∞—Ç ' + choose([
                    'MYAAA',
                    'catNom',
                    'MEOW'
                ]),
                '–∫—É–ø–∞—Ç Tastge'
            ]);

        case 'theanatoliygamer':
        case 'anatoliygamer':
            if (random() < 0.25) break;
            return choose([
                '–ß–æ–Ω –°–æ –Å–Ω AYAYA',
                'Winter of Aespa AYAYA',
            ]);

        case 'hurmaowosh1':
            return choose([
                '–ø–∏—Ä–æ–∂–æ–∫ Tastge',
                '—Ö—É—Ä–º—É Tastge',
                '–æ–≤–æ—â Tastge'
            ]);

        case 'myasnoe_file': return '—Ñ–∏–ª–µ popCat';
        case 'i_pipa': return '–ø–∏–ø—É PETTHEPEEPO';
    }

    const res = rchoose(targets);

    if (res.indexOf('–±–∞–Ω') === 0) {
        const ctx = flow.get('context', 'file')[msg.payload.channel];
        const m = find(ctx, (m) => m.payload.userstate.username === user);
        if (m) msg.api.timeout(60, '–∫—É—Å—å catNom', m.payload.userstate['user-id']);
    }

    return res;
}

if (mentions.length == 0) {
    msg.reply = `/me ${rchoose(actions)}`;
    mentions.push([user, 1]);
} else {
    msg.reply = `@${user} ${rchoose(actions)}`;
}

const match = msg.parsed.command.match(/^–∫(—É*)—Å[—å—Ç]/i);
const count = match ? match[1].length : 1;

if (msg.parsed.command.match(/–∫—É*—Å—Ç/i)) {
    msg.reply += `, –æ–¥–Ω–∞–∫–æ —Å–ø–æ—Ç—ã–∫–∞–µ—Ç—Å—è –æ –∫—É—Å—Ç`;

    if (mentions.length == 0) {
        msg.reply += `, –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è –º–∏–º–æ @${user}`;
    }

    msg.reply += ' –∏ –∫—É—Å–∞–µ—Ç —Å–µ–±—è ' + (count > 0 ? '–∑–∞ ' : '');
    msg.reply += smartJoin(range(Math.min(count, 3)).map(() => bite(user)), ' , ');
} else {
    msg.reply += ' –∏ –∫—É—Å–∞–µ—Ç ';

    if (mentions.length <= 3) {
        msg.reply += smartJoin(mentions.map(([user]) => (
            `@${user} ` +
            (count > 0 ? '–∑–∞ ' : '') +
            smartJoin(range(Math.min(count, 3)).map(() => bite(user)), ' , ')
        )), ' , ');
    } else {
        msg.reply += smartJoin(mentions.map(([user]) => `@${user}`));

        if (count > 0) {
            msg.reply += ` –∑–∞ ${bite()}`;
        }
    }
}

return msg;
