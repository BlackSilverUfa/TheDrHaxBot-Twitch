const key = 'twitch_channels.' + msg.command.channel.substring(1);
const stream = flow.get(key, 'file');

const { smartJoin, last, renderTemplate, ptime, ftime } = flow.get('func', 'memory');
const { zip } = lodash;

const query = msg.parsed.query_filtered;

function updateGameHistory(name, replace) {
    const now = new Date();
    const lastGame = stream.game_history[stream.game_history.length - 1];

    if (replace == null) {
        const age = +now - +new Date(lastGame.date);
        replace = age < 5 * 60 * 1000; // changed < 5m ago
    }

    if (replace) {
        lastGame.name = name;
    } else {
        stream.game_history.push({
            name,
            date: now.toISOString()
        });
    }
}

if (msg.parsed.level <= 1) { // mods and up
    let [cmd, ...args] = query.split(' ');

    switch (cmd) {
        case 'edit':
            let id;
            [id, cmd, ...args] = args;
            id -= 1;

            if (Number.isNaN(+id) || !cmd) {
                msg.reply = '—É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –∏ –∫–æ–º–∞–Ω–¥—É';
                return msg;
            }

            const entry = stream.game_history[id];

            if (!entry) {
                msg.reply = `–≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä –≤—Å–µ–≥–æ ${stream.game_history.length} –ø—É–Ω–∫—Ç–æ–≤, –∞ –≤—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ ${id + 1}-–π`;
                return msg;
            }

            const streamStart = new Date(stream.date);
            const now = new Date();

            switch (cmd) {
                case 'get':
                    msg.reply = `${entry.name} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ${ftime((+new Date(entry.date) - +streamStart) / 1000)}`;
                    return msg;

                case 'name':
                    const oldName = entry.name;
                    const newName = args.join(' ');

                    if (newName.length === 0) {
                        msg.reply = '—É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ';
                        return msg;
                    }

                    entry.name = newName;
                    flow.set(key, stream, 'file');
                    msg.reply = `–∏–≥—Ä–∞ "${oldName}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "${newName}"`;
                    return msg;

                case 'time':
                    if (id === 0) {
                        msg.reply = '—É –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ';
                        return msg;
                    }

                    const newTime = ptime(args[0]);

                    if (Number.isNaN(newTime)) {
                        msg.reply = '—É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –∏–ª–∏ MM:SS';
                        return msg;
                    }

                    const newDate = Sugar.Date.advance(
                        new Date(stream.date),
                        { seconds: newTime }
                    );

                    const lowerBound = new Date(streamStart);
                    const upperBound = new Date(stream.date_end || now);

                    if (newDate <= lowerBound || newDate >= upperBound) {
                        const upperBoundStr = ftime((+upperBound - +streamStart) / 1000);
                        msg.reply = `–≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0:00 –∏ ${upperBoundStr}`;
                        return msg;
                    }

                    entry.date = newDate.toISOString();
                    stream.game_history = stream.game_history
                        .sort((a, b) => +new Date(a.date) - +new Date(b.date));

                    flow.set(key, stream, 'file');
                    msg.reply = `—Ç–µ–ø–µ—Ä—å "${entry.name}" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ${ftime(newTime)}`;
                    return msg;

                default:
                    msg.reply = '–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: get, name, time';
                    return msg;
            }

        case 'set':
        case 'split':
        case 'replace':
            if (!stream.active) {
                msg.reply = '—Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ü§î';
                return msg;
            }

            if (args.length == 0) {
                msg.reply = '—É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã';
                return;
            }

            stream.game_forced = args.join(' ');

            if (cmd == 'set') {
                updateGameHistory(stream.game_forced);
            } else {
                updateGameHistory(stream.game_forced, cmd == 'replace');
            }

            flow.set(key, stream, 'file');

            msg.reply = `–∏–≥—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${stream.game_forced} SeemsGood`;
            return msg;

        case 'delete':
            if (!stream.active) {
                msg.reply = '—Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ü§î';
                return msg;
            }

            if (stream.game_history.length === 1) {
                msg.reply = '–Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∏–≥—Ä—É - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É replace ü§ì';
                return msg;
            }

            stream.game_forced = null;

            const game = stream.game_history.pop();
            flow.set(key, stream, 'file');

            msg.reply = `–∏–≥—Ä–∞ ${game.name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ ü´°`;
            return msg;

        case 'reset':
            stream.game_forced = null;

            if (stream.active) {
                updateGameHistory(stream.game);
            }

            flow.set(key, stream, 'file');

            if (stream.active) {
                msg.reply = `–∏–≥—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${stream.game} SeemsGood`;
            } else {
                msg.reply = '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤—Ä—É—á–Ω—É—é –∏–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ SeemsGood';
            }

            return msg;

        case 'help':
            msg.reply = '–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: set, split, replace, delete, reset';
            return msg;
    }
}

const now = +new Date();

if (stream?.active) {
    let game = stream.game_forced || stream.game;
    msg.reply = `—Å–µ–π—á–∞—Å —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç—Å—è ${game} SeemsGood`;
} else {
    msg.reply = '—Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ :(';
}

return msg;
