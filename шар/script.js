const ANSWERS = {
    positive: [
        '–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞ YEPPERS',
        '–º–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º YEPPERS',
        '–Ω–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π YEPPERS',
        '–∞–±—Å–æ–ª—é—Ç–ª–∏ YEPPERS',
        '–Ω—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ YEPPERS',
        '–¥–∞ YEPPERS'
    ],

    plausible: [
        '—Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã SeemsGood',
        '–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ SeemsGood',
        '–¥—É–º–∞—é, —á—Ç–æ –¥–∞ SeemsGood',
        '–Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–æ SeemsGood',
        '–Ω–µ–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ SeemsGood'
    ],

    uncertain: [
        '–ø–æ–∫–∞ –Ω–µ —è—Å–Ω–æ peepoThink',
        '–Ω–µ —É–≤–µ—Ä–µ–Ω peepoThink',
        '—Ç—É—Ç –≤—Å—ë –Ω–µ —Ç–∞–∫ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ peepoThink',
        '—Å–∫–∞–∂—É –∑–∞ –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É, BSUDAI',
        '–Ω–µ —Å—Ç–æ–∏—Ç –≤—Å–∫—Ä—ã–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É. –í—ã –º–æ–ª–æ–¥—ã–µ, —à—É—Ç–ª–∏–≤—ã–µ, –≤–∞–º –≤—Å–µ –ª–µ–≥–∫–æ. –≠—Ç–æ –Ω–µ —Ç–æ. –ü–æ–≥–∏–±–Ω—É—Ç –í–°–Å monkaGunshake'
    ],

    implausible: [
        '–¥–∞ –Ω–µ—Ç, –Ω–∞–≤–µ—Ä–Ω–æ–µ BSUHee',
        '—à–∞–Ω—Å—ã –Ω–µ –æ—á–µ–Ω—å BSUHee',
        '—Å–∫–æ—Ä–µ–µ –Ω–µ—Ç, —á–µ–º –¥–∞ BSUHee',
        '—è –±—ã –Ω–µ –Ω–∞–¥–µ—è–ª—Å—è BSUHee'
    ],

    negative: [
        '–¥–∞–∂–µ –Ω–µ –Ω–∞–¥–µ–π—Å—è NOPERS',
        '–≤–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ NOPERS',
        '–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –Ω–µ—Ç NOPERS',
        '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ö–†–ê–ô–ù–ï –º–∞–ª–∞ NOPERS',
        '–Ω–∏–∫–æ–≥–¥–∞ –≤ –∂–∏–∑–Ω–∏ NOPERS',
        '–Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç NOPERS'
    ]
};

const CONTINUATIONS = [
    '–∞ –≤—Å—ë—ë—ë BSUHee',
    '–∞–Ω—è ANYA',
    '–∞–Ω–ª–∞–∫–∏ BSUHee',
    '–∞–ª–ª–æ peepoPhonexmas',
    '–∞–¥–∞, —è –ª—é–±–ª—é —Ç–µ–±—è ANYA',
    '–∞–±—Å–æ–ª—é—Ç–ª–∏ YEPPERS',
    '–∞—ã–∞—ã–∞ ANYA',
    '–∞—É—Ñ üê∫',
    '–∞–ø—á—Ö–∏ ANYA',
    '–∞–º–∞–º–∞–º popCat',
    '–∞–º–æ–≥—É—Å ‡∂û',
    '–∞—è—è AYAYA',
    '–∞–≥–∞ YEPPERS',
    'ass gachiBASS',

    '–±–∞–Ω monkaBAN',
    '–±–∞—Ç–∞—Ç BSULoot',
    '–±—É–±–∞ BOOBA',
    '–±–æ—Ä—è CatCrying',
    '–±–æ—Ä–æ–¥–∞ popCat',
    '–±–ª—é–π –ø–µ–π dead5What MedTime',
    '–±–µ–∂–∞—Ç—å –Ω–µ–∫—É–¥–∞ ariW',

    '–≤–µ—Ä—Ç—É—Ñ–∞–π–∑–µ–Ω bUrself',
    '–≤—ã –ø—Ä–æ–¥–æ—ë—Ç–µ —Ä—ã–±–æ–≤? ANYA',
    '–≤—ã—Ö–æ–¥–Ω–æ–π peepoComfy',

    '–≥–∏–≤–∞—Å–∞—Å–∞–π monkaChrist',

    '–¥–∞–º–µ –¥–∞ –Ω–µ, –¥–∞–º–µ –π–æ –¥–∞–º–µ –Ω–∞ –Ω–æ –π–æ KasugaYeah',
    '–¥–∂–µ—Ä—Ä–∏ peepoPhonexmas',

    '–µ—Å–ª–∏ –Ω–µ –º—ã, —Ç–æ –∫—Ç–æ? KKomrade',

    '–∂–µ—Å—Ç—å ANYA',

    '–æ–æ–æ, —ç–ª–¥–µ–Ω —Ä–∏–Ω–≥ KOgasm',
    '–æ–ø –æ–ø PepoG',
    '–æ–ø –ø–∞ Pepega',
    '–æ–ø–æ–ª–∑–µ–Ω—å popCat',
    '–æ–≥–Ω–µ–æ–ø–∞—Å–Ω–æ gachiOnFIRE',
    '–æ–º—Å–∫ LetMeIn',

    '–º–∞–ª–µ–Ω–∏—è Jammies –ö–ª–∏–Ω–æ–∫ –ú–∏–∫–µ–ª–ª—ã Jammies',
    '–º–∏—Ñ–∞ BibleThump',
    '–º–∏–ª–∞ AYAYA',
    '–º–µ–≥–∞–º–∞–∫–∏ gachiHYPER',

    '–Ω—É –î–∏–∏–∏–º–∞ Jebaited',
    '–Ω–æ–æ popCat –Ω–æ–æ popCat –Ω–æ–æ popCat',

    '—Ä–µ–∞–∫—Ü–∏—è –º–∞–Ω–≥—É—Å—Ç–∞ Pepega',

    '—Å–∫–∞–π—Ä–∏–º toddW',
    '—Å–æ—Å –º—ã—Å–ª–æ–º ANYA',
    '—Å–æ–≤ –ø–∞–¥–µ–Ω–∏–µ BSUbl',
    '—Å—É–ø–µ—Ä YEPPERS',

    '–Ω–µ –µ—à, –ø–æ–¥—É–º–æ–π CatCrying',
    '–Ω–∏—á–æ—Å–∏ Pog',

    '–∏—Å–ø–∞–Ω—Ü—ã! BSURage',
    '–∏–≥—Ä—ã YEPPERS',
    '–∏–≥–æ—Ä—å —Ç–æ–Ω–µ—Ç CatCrying',
    '–∏—Ç–∞–Ω ariW',

    '—É–ª—å BSUWait',
    '—É–≤—É UwU',
    '—É—É—É—É–£–£–£–£ BSUbl',
    '—É–æ—Ç —Ç–∞–∫ —É–æ—Ç BSUFlex',

    '–ø–ª–∞–Ω–µ—Ä –¥–∞–π Jebaited',
    '–ø–æ–≤—Ç–æ—Ä YEPPERS',
    '–ø–æ–ø–æ–ª–∑–µ–Ω—å popCat',
    '–ø–∏–ø–∞ PETTHEPEEPO',
    '–ø–æ–ø–∞ peepoGiggles',
    '–ø–æ–Ω–∏–º–∞—é YEPPERS',
    '–ø–æ–≥–∏–±–Ω—É—Ç –í–°–Å monkaEyes',
    '–ø–æ–ø–æ–ª–∞ AYAYA',
    '–¥–µ–≤–æ–ª–∞ AYAYA',

    '—Ç–∞—à–æ–Ω CatCrying',
    '—Ç—ã –∫—Ç–æ? Jebaited',
    '—Ç—ã –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤–∞, –æ —Ç—ã –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤–∞ LetMeIn',

    '–∫–± ANYA',
    '–∫—Ç–æ, –µ—Å–ª–∏ –Ω–µ –º—ã? KKomrade',
    '–∫—É–∫–∏–Ω–≥ —Å—Ç—Ä–∏–º –∑–∞–≤—Ç—Ä–∞ Agakakskagesh',
    '–∫—É–ª—è-–±—É–ª—è ANYA',
    '–∫—É–ª—è–ª—è ANYA',
    '–∫—É–∫—É, –∏–ø—Ç–∞ ANYA',
    '–∫—É–∫—É—Å–∏–∫–∏ NomNom',
    '–∫—É–ª –∫–æ–ª–∞ KEKLEO',
    '–∫—É–ø–∏ toddW',
    '–∫—Ä—ã–∂–æ–≤–Ω–∏–∫ —Ç–µ—Ä–ø–∫–∏–π, —Å–ª–∞–¥–∫–∞—è —Å–∏—Ä–µ–Ω—å ANYA',
    '–∫–æ–¥–∑–∏–º–∞ –≥–µ–Ω–∏–π Kojimaptyp',
    '–∫–æ–∑–∏ peepoBlanket',
    '–∫—Ç—É–ª—Ö—É —Ñ—Ö—Ç–∞–≥–Ω Squid1 Squid2 Squid3 Squid4',

    '—Ñ—ç–º—ç–ª—ç ANYA',

    '—ã–∞—ã–∞—ã ANYA',

    '—Ö—É–±–∏–∫–∏ ANYA',

    '—à–æ—Ä—ç –ø–∏–ø–ø–∏ popCat',

    '—ç–±–±–∏ pepeSmack',
    '—ç–Ω–≤–∞–π—Ä–æ–Ω–º–µ–Ω—Ç–∞–ª —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ ANYA',

    '—è –æ—Ö–æ—Ç–Ω–∏–∫ Pepega'
];

const CHOICES = [
    '—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ {x} peepoThink',
    '–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ {x} YEPPERS',
    '{x} ‚Äî –Ω–∞—à –≤—ã–±–æ—Ä SeemsGood',
    '–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ {x} peepoThink',
    '–∫–æ–Ω–µ—á–Ω–æ –∂–µ {x} YEPPERS'
];

const FIXED_ANSWERS = {
    '^(—Ç—ã –∫—Ç–æ|–∫—Ç–æ —Ç—ã)': () => choose([
        '–∞ —Ç—ã –∫—Ç–æ? Jebaited',
        '–∫–æ–Ω—å –≤ –ø–∞–ª—å—Ç–æ Jebaited',
        '–Ω–µ—Ç, —Ç—ã –∫—Ç–æ? Jebaited'
    ]),

    '^–ø–∏–Ω–≥$': () => '–ø–æ–Ω–≥ Pepega',

    '^(–∞\s)?–º–æ–∂–µ—Ç\s': () => '–∞ –º–æ–∂–µ—Ç —Ç–µ–±—è? Jebaited',

    '^–±–∞–ª–ª?–æ–Ω —Å —á–µ–º': () => choose([
        '—Å –ø—Ä–æ–ø–∞–∞–∞–Ω–æ–º! Pepega',
        '—Å –≤–æ–∑–¥—É—Ö–æ–º BSUHee',
        '—Å –≤–æ—Ä–≤–∞–Ω—å—é! Pepega',
        '—Å–æ —Å–∂–∏–∂–µ–Ω–Ω—ã–º –≤–∞–∫—É—É–º–æ–º ANYA'
    ]),

    '^(–Ω–µ—Ç,? )?—Ç—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π': () => choose([
        '–¥–∞, —è —Ç–∞–∫–æ–π Kappa',
        '–Ω–µ—Ç, —Ç—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π! keanU',
        '—è –∑–Ω–∞—é Kappa',
        '–Ω–µ—Ç, —Ç—ã keanU'
    ]),

    '^omae wa mou shindeiru': () => 'nani?! BSURage',
    '^(h?e(he)+|—Ö?–∏(—Ö–∏)+)(\s|$)': (match) => (
        `${match[1]} tte nandayo?! loliTriggered`
    ),

    '^—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–µ—Ä–µ–≤–µ—Ä–Ω—É': () => '–∏ —Å–Ω–æ–≤–∞ 3-–µ –°–µ–Ω—Ç—è–±—Ä—è MmmHmm',
    '^—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å': () => '–ø–µ—Ä–µ–≤–µ—Ä–Ω—É, –∏ —Å–Ω–æ–≤–∞ 3-–µ –°–µ–Ω—Ç—è–±—Ä—è MmmHmm',

    '^—è (—à–µ–ø–Ω—É|–ø—Ä–æ—à–µ–ø—á—É) —Ç–µ–±–µ –Ω–∞ —É—à–∫–æ': () => '–∞–Ω–Ω–∏–≥–∏–ª—è—Ç–æ—Ä–Ω–∞—è –ø—É—à–∫–∞! PepegaAim',
    '^[UO][wœâv][UO]$': () => choose(['UœâU', '√≤œâ√≥', 'OœâO', '‡≤†_‡≤†', 'üëÅ üëÑ üëÅ']),
    '^(PETTHE|(–Ω–µ )?–ø–∏–ø(–∞–π|–Ω–∏|\ |$))': () => '–ø–∏–ø ' + choose([
        'PETTHEPEEPO',
        'PETTHEAPTEEPO',
        'PETTHECAT',
        'PETTHEEVAN',
        'PETTHEMOD'
    ]),

    '^(–∞\s+)?–±—É–¥–µ—Ç\s+–∫—É–∫–∏–Ω–≥': () => choose([
        '–∫–æ–Ω–µ—á–Ω–æ –±—É–¥–µ—Ç, —É–∂–µ –∑–∞–≤—Ç—Ä–∞ Agakakskagesh',
        '–∫—É–∫–∏–Ω–≥ —Å—Ç—Ä–∏–º –∑–∞–≤—Ç—Ä–∞! –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑ Agakakskagesh'
    ]),

    '^–≤—ã –ø—Ä–æ–¥[–∞–æ][–µ—ë]—Ç–µ ([^?]+)(\\?.*|$)': (match) => {
        switch (match[1].toLowerCase()) {
            case '—Å–∫–∞–π—Ä–∏–º–æ–≤':
                return '–¥–∞ toddW';
            
            default:
                return '–Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ANYA';
        }
    },
};

// =====================================================

const { choose, rchoose, renderTemplate, agreeWithNum } = flow.get('func', 'memory');
const { parse, inflect } = flow.get('inflector', 'memory');

const choice = (x) => renderTemplate(choose(CHOICES), { x });

const translate = (text, from, to) => (
    text.split('')
        .map((c) => (to[from.indexOf(c)] || c))
        .join('')
);

const distinct = (text) => (
    text.split('')
        .reduce((p, c) => (p[p.length - 1] == c ? p : `${p}${c}`))
);

const continueStr = (text) => {
    text = text.toLowerCase();
    text = translate(text, 'a', '–∞');
    text = distinct(text).replace(/[.‚Ä¶]*$/, '');

    if (text.length === 0) {
        return null;
    }

    return choose(
        CONTINUATIONS
            .filter((x) => translate(x, 'a', '–∞').startsWith(text))
            .map((x) => x.substring(text.length))
    );
};

const substringBefore = (text, x) => {
    const index = text.indexOf(x);
    return index === -1 ? text : text.substring(0, index);
};

const startsWithAny = (text, list = []) => {
    for (let x of list) {
        if (text.startsWith(x)) {
            return true;
        }
    }
    return false;
}

const countDecimals = function (x) {
    if (Math.floor(x) === x) return 0;
    return x.toString().split('.')[1].length || 0;
};

// =====================================================

const main = () => {
    const query = msg.parsed.query;
    let match;

    if (query.length === 0) {
        const [_, vowels] = msg.payload.message.match(/^!—à+([–∞–æ]+)—Ä+/i) || ['–∞'];
        return choose([
            `—á—Ç${translate(vowels, '–ê–∞–û–æ–£—É', '–û–æ–ê–∞–û–æ')}? Jebaited`,
            `${translate(vowels, '–û–æ', '–ê–∞')}? Jebaited`
        ]);
    }

    for (let key in FIXED_ANSWERS) {
        if (match = msg.parsed.query_filtered.match(new RegExp(key, 'i'))) {
            return FIXED_ANSWERS[key](match);
        }
    }

    if (msg.parsed.emotesOnly && msg.parsed.emotes.length <= 3) {
        return msg.parsed.query_filtered;
    }

    if (query.match(/\s(–∏–ª–∏|or)\s/)) {
        let options = substringBefore(query, '?')
            .replace(/\s(–∏–ª–∏|or)\s/, ', ')
            .split(', ')
            .map((x) => x.trim());

        if (startsWithAny(options[0].toLowerCase(), [
            '–≤–æ —á—Ç–æ', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫—É–¥–∞', '–∫–æ–≥–¥–∞', '–∫—Ç–æ'
        ])) {
            options.splice(0, 1);
        }

        if (options.length === 2) {
            if (`–Ω–µ ${options[0]}` === options[1]) {
                if (options[0] === '–±—É–¥—å') {
                    return '—Å–¥–µ–ª–∞–π –∂–µ —á—Ç–æ-–Ω–∏–±—É–¥—å LetMeIn';
                }

                return '–≤–æ—Ç –≤ —á—ë–º –≤–æ–ø—Ä–æ—Å Kojimaptyp';
            } else if (`not ${options[0]}` === options[1]) {
                return 'that is the question Kojimaptyp';
            } else if (options[0] === options[1]) {
                return '–¥–∞ YEPPERS';
            }
        }

        return choice(choose(options));
    }

    if (match = query.match(/–æ—Ç ([+-]?[0-9\.e]+) –¥–æ ([+-]?[0-9\.e]+)/i)) {
        let [_, a, b] = match;
        [a, b] = [a, b].map((x) => Number(x)).sort((a, b) => a - b);

        const x = Math.random() * (b - a) * 1.2 + a - (b - a) * 0.1;

        if (x > b) {
            return `–¥—É–º–∞—é, —á—Ç–æ –±–æ–ª—å—à–µ ${b} YEPPERS`;
        } else if (x < a) {
            return `–¥—É–º–∞—é, —á—Ç–æ –º–µ–Ω—å—à–µ ${a} NOPERS`;
        } else {
            const precision = Math.max(countDecimals(a), countDecimals(b));
            return choice(x.toFixed(precision));
        }
    }

    if (match = query.match(/—Å–∫–æ–ª—å–∫–æ (.+) –∏–∑ ([0-9]+)/i)) {
        const [_, term, range] = match;
        const x = Math.floor(Math.random() * (Number(range) + 1));

        const pluralizedTerm = term
            .split(' ')
            .map((word) => inflect(
                parse(word, ['gent', 'plur']),
                agreeWithNum(x, [
                    ['nomn', 'sing'],
                    ['gent', 'sing'],
                    ['gent', 'plur']
                ])
            ))
            .join(' ');

        return choice(`${x} ${pluralizedTerm} –∏–∑ ${range}`);
    }

    if (match = query.match(/–æ—Ü–µ–Ω–∏ (.+) –≤ (.+)/i)) {
        const term = match[2];
        const x = Math.floor(Math.random() * 11);

        const pluralizedTerm = term
            .split(' ')
            .map((word) => inflect(
                parse(word, ['loct', 'plur']),
                agreeWithNum(x, [
                    ['nomn', 'sing'],
                    ['gent', 'sing'],
                    ['gent', 'plur']
                ])
            ))
            .join(' ');

        return choice(`${x} ${pluralizedTerm} –∏–∑ 10`);
    }

    if (match = continueStr(msg.parsed.query_filtered)) {
        return `...${match}`;
    }

    return rchoose(Object.values(ANSWERS));
}

msg.reply = main();
return msg;

